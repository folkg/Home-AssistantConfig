# ##################################
# NodeMCU ESP32 with DHT22 Temp/Humidity, Pressure Mats, BH1750 Lux
# ##################################

# NodeMCU '22' --> AM312 'signal'
# NodeMCU '5V' --> AM312 'VCC'
# NodeMCU 'G' --> AM312 'GND'

# NodeMCU '23' --> DHT22 'out'
# NodeMCU 'G' --> DHT22 '-'

# NodeMCU '3V3' --> DHT22 '+'
# NodeMCU '3V3' --> Resistor 1 in
# NodeMCU '3V3' --> Resistor 2 in

# NodeMCU '32' --> BH-1750 'SCL'
# NodeMCU '33' --> BH-1750 'SDA'
# NodeMCU '5V' --> BH-1750 'VCC'
# NodeMCU 'G' --> BH-1750 'GND'

# NodeMCU '34' --> Resistor 1 out
# NodeMCU 'G' --> Carla Pressure Sensor '-'

# NodeMCU '35' --> Resistor 2 out
# NodeMCU 'G' --> Carla Pressure Sensor '-'

# ##################################
# https://docs.zerynth.com/latest/_images/nodemcu3_comm.jpg
# https://www.iot-kit.nl/docs/sensor-bh1750/
# ##################################

substitutions:
  room_name: bedroom
  friendly_room_name: Bedroom
  sensor_update_interval: 15s
  updates_per_message: "8"
  
esphome:
  name: ${room_name}-multi-sensor
  platform: ESP32
  board: nodemcu-32s
  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${friendly_room_name} Multisensor
    password: "51Uv8rKokvrP"

captive_portal:

logger:

ota:

api:

# The BH1750 sensor is an I2C sensor, so first prepare the 
# controller to talk to I2C sensors!
i2c:
  sda: GPIO21
  scl: GPIO22
  scan: False

sensor:
  #wifi signal
  - platform: wifi_signal
    name: ${room_name}_multi_sensor_signal
    update_interval: 300s
    filters:
      - sliding_window_moving_average:
          window_size: 12
          send_every: 12
      - delta: 1

  # The BH1750 sensor by default uses I2C address 0X23
  - platform: bh1750
    name: ${friendly_room_name} Window Brightness
    address: 0x23
    update_interval: ${sensor_update_interval}
    filters:
      - sliding_window_moving_average:
          window_size: ${updates_per_message}
          send_every: ${updates_per_message}
      - delta: 1

  - platform: dht
    pin: GPIO23
    model: DHT22
    update_interval: ${sensor_update_interval}
    temperature:
      name: ${friendly_room_name} Temperature
      filters:
        - sliding_window_moving_average:
            window_size: ${updates_per_message}
            send_every: ${updates_per_message}
        - delta: 0.2
    humidity:
      name: ${friendly_room_name} Humidity
      filters:
        - sliding_window_moving_average:
            window_size: ${updates_per_message}
            send_every: ${updates_per_message}
        - delta: 0.5


#what readings do we get if one lies diagonally, can we use this to determine how many people? ie. sum the voltages across the two sensors?
  - platform: adc
    pin: GPIO35
    id: carla_pressure
    update_interval: 10s
    attenuation: 11db
    filters:
      - delta: 0.2

  - platform: adc
    pin: GPIO34
    id: graeme_pressure
    update_interval: 10s
    attenuation: 11db
    filters:
      - delta: 0.2

  # we might want to just do this in Home Assistant, there may be more than one bed
#  - platform: template
#    id: people_in_bed
#    name: "People in Bed"
#    icon: "mdi:bed-king"
#    accuracy_decimals: 0
#    update_interval: never
#    lambda: |-
#      return id(graeme_in_bed).state + id(carla_in_bed).state;

binary_sensor:
  # Carla in Bed sensor
  - platform: template
    name: Carla in Bed
    id: carla_in_bed
    device_class: occupancy
    lambda: |-
      if (id(carla_pressure).state < 2.65) {
        return true;
      } else {
        return false;
      }
    filters:
      - delayed_off: 20s

  # Graeme in Bed sensor
  - platform: template
    name: Graeme in Bed
    id: graeme_in_bed
    device_class: occupancy
    lambda: |-
      if (id(graeme_pressure).state < 3.0) {
        return true;
      } else {
        return false;
      }
    filters:
      - delayed_off: 20s
      
#  #AM312 PIR Sensor
#  - platform: gpio
#    pin: GPIO22
#    id: motion_sensor
#    device_class: motion

#  #Motion sensor that will be sustained for 15 minutes 
#  - platform: template
#    name: ${friendly_room_name} Motion
#    device_class: motion
#    filters:
#      - delayed_off: 900s
#    lambda: |-
#      if (id(motion_sensor).state) {
#        // Motion is detected
#        return true;
#      } else {
#        // Motion is no longer detected
#        return false;
#      }