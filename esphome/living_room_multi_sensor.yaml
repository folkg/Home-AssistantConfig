# ##################################
# NodeMCU v3 with BH1750 Lux, DHT22 Temp/Humidity, AM312 PIR
# ##################################
# NodeMCU 'D1' --> BH-1750 'SCL'
# NodeMCU 'D2' --> BH-1750 'SDA'
# NodeMCU '3V' --> BH-1750 'VCC'
# NodeMCU 'G' --> BH-1750 'GND'
#
# NodeMCU 'D7' --> DHT22 'out'
# NodeMCU '3V' --> DHT22 '+'
# NodeMCU 'G' --> DHT22 '-'
#
# NodeMCU 'D5' --> AM312 'signal'
# NodeMCU 'VV' (5V) --> AM312 'VCC'
# NodeMCU 'G' --> AM312 'GND'

# NodeMCU 'D6' --> SK6812 LED Strip DIN
# ##################################
# https://docs.zerynth.com/latest/_images/nodemcu3_comm.jpg
# https://www.iot-kit.nl/docs/sensor-bh1750/
# ##################################

substitutions:
  room_name: living-room
  friendly_room_name: Living Room
  sensor_update_interval: 15s
  updates_per_message: "8"
  
esphome:
  name: ${room_name}-multi-sensor
  platform: ESP8266
  board: nodemcuv2
  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${friendly_room_name} Multisensor
    password: "51Uv8rKokvrP"

captive_portal:

logger:

ota:

api:

# The BH1750 sensor is an I2C sensor, so first prepare the 
# controller to talk to I2C sensors!
i2c:
  sda: D2
  scl: D1
  scan: False

sensor:
  #wifi signal
  - platform: wifi_signal
    name: ${room_name}_multi_sensor_signal
    update_interval: 300s
    filters:
      - sliding_window_moving_average:
          window_size: 12
          send_every: 12
      - delta: 1

  # The BH1750 sensor by default uses I2C address 0X23
  - platform: bh1750
    name: ${friendly_room_name} Brightness
    address: 0x23
    update_interval: ${sensor_update_interval}
    filters:
      - sliding_window_moving_average:
          window_size: ${updates_per_message}
          send_every: ${updates_per_message}
      - delta: 1

  - platform: dht
    pin: D7
    model: DHT22
    update_interval: ${sensor_update_interval}
    temperature:
      name: ${friendly_room_name} Temperature
      filters:
        - sliding_window_moving_average:
            window_size: ${updates_per_message}
            send_every: ${updates_per_message}
        - delta: 0.2
    humidity:
      name: ${friendly_room_name} Humidity
      filters:
        - sliding_window_moving_average:
            window_size: ${updates_per_message}
            send_every: ${updates_per_message}
        - delta: 0.5
          
binary_sensor:
  #AM312 PIR Sensor
  - platform: gpio
    pin: D5
    device_class: motion
    id: motion_sensor

  #Motion sensor that will be sustained for 15 minutes 
  - platform: template
    name: ${friendly_room_name} Motion
    device_class: motion
    filters:
      - delayed_off: 900s
    lambda: |-
      if (id(motion_sensor).state) {
        // Motion is detected
        return true;
      } else {
        // Motion is no longer detected
        return false;
      }

#LED Strip
light:
  - platform: neopixelbus
    type: GRBW
    variant: SK6812
    pin: GPIO3 #RX, serial in
    num_leds: 264
    name: "TV Lights"
    id: tv_lights
    default_transition_length: 2.5s
    effects:
      - addressable_rainbow:
      - addressable_color_wipe:
      - addressable_scan:
      - addressable_twinkle:
      - addressable_random_twinkle:
      - addressable_fireworks:
      - addressable_color_wipe:
          name: Christmas Lights
          colors:
            - red: 100%
              green: 0%
              blue: 0%
              white: 0%
              num_leds: 25
            - red: 0%
              green: 100%
              blue: 0%
              white: 0%
              num_leds: 25
          add_led_interval: 100ms
          reverse: False
      - addressable_lambda:
          name: "Twinkle Christmas"
          update_interval: 100ms
          lambda: |-
            // it.size() - Number of LEDs
            // it[num] - Access the LED at index num.
            // Set the LED at num to the given r, g, b values
            // it[num] = Color(r, g, b);
            // Get the color at index num (Color instance)
            // it[num].get();
            
            if (initial_run) {
              it.all().fade_to_black(10);
            }

            Color colors[] = { Color(255,0,0), 
                                  Color(0,255,0),
                                  };

            if (random_float() < 0.1) {  //10% chance of twinkling
              int pos = random_uint32() % it.size();
              it[pos] = colors[random_uint32() % 2];
              //it[pos].fade_to_black(10);
            }
      #Right:48, Top:84, Left:47, Bottom:85
      - addressable_lambda:
          name: "Leafs Lights"
          lambda: |-
            it.all() = Color(0,0,255,0); //blue
            it.range(16, 31) = Color(0,0,0,255); //white
            it.range(148, 163) = Color(0,0,0,255); //white
      - addressable_color_wipe:
          name: "Leafs Wipe"
          colors:
            - red: 0%
              green: 0%
              blue: 0%
              white: 90%
              num_leds: 16
            - red: 0%
              green: 0%
              blue: 100%
              white: 0%
              num_leds: 116
          add_led_interval: 1000ms
          reverse: True
      - addressable_lambda:
          name: "Flames Stripes"
          lambda: |-
            it.all() = Color(241, 190, 72,0); //yellow
            it.range(10, 37) = Color(200,16,46,0); //red
            it.range(142, 169) = Color(200,16,46,0); //red
      - addressable_lambda:
          name: "Flames Fire"
          update_interval: 10ms
          lambda: |-
            it.range(0, 32) = Color(200,16,46); //red
            it.range(149, 263) = Color(200,16,46); //red
            for( int Pixel = 33; Pixel <= 148; Pixel++) {
              it[Pixel] = Color(241, 190, 72);
              Color color1;
              uint8_t r1,g1,b1;
              uint8_t r2,g2,b2;
              uint8_t r3,g3,b3;
              int16_t r,g,b;

              color1 = it[Pixel].get();
              int color2[] = {200,16,46}; //flames yellow
              
              r1 = (color1[0] ),
              g1 = (color1[1] ),
              b1 = (color1[2] );

              r2 = (color2[0] ),
              g2 = (color2[1] ),
              b2 = (color2[2] );

              // Add Color
              it[Pixel] = Color(constrain(r1+r2, 0, 255), constrain(g1+g2, 0, 255), constrain(b1+b2, 0, 255));
              int rc = random(120);

              // subtract
              
              color2[0] = rc;
              color2[1] = rc/2;
              color2[2] = rc/2;

              r1 = (color1[0] ),
              g1 = (color1[1] ),
              b1 = (color1[2] );

              r2 = (color2[0] ),
              g2 = (color2[1] ),
              b2 = (color2[2] );

              r=(int16_t)r1-(int16_t)r2;
              g=(int16_t)g1-(int16_t)g2;
              b=(int16_t)b1-(int16_t)b2;
              if(r<0) r=0;
              if(g<0) g=0;
              if(b<0) b=0;

              //ESP_LOGD("main", "Color1 :(%d,%d,%d)", r,g,b);
              // Substract Color
              it[Pixel] = Color(r, g, b);
            }
            
            delay(random(20,125));
      - addressable_lambda:
          name: "Minnesota Wild Lights"
          lambda: |-
            it.all() = Color(59,109,90,0); //green
            it.range(16, 20) = Color(237,170,0,0); //yellow
            it.range(21, 31) = Color(175,35,36,0); //red
            it.range(148, 158) = Color(175,35,36,0); //red
            it.range(159, 163) = Color(237,170,0,0); //yellow
    on_turn_on:
      - lambda: |- 
          if (id(tv_lights).remote_values.get_brightness() == 1.0f && id(tv_lights).remote_values.get_white() == 1.0f) {
            id(tv_lights).remote_values.set_brightness(0);
            id(tv_lights).remote_values.set_white(0.5);
          }
